// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Chatterino/api/internal/resolvers/imgur (interfaces: ImgurClient)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/mock_imgurClient.go -package=mocks . ImgurClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	go_imgur "github.com/koffeinsource/go-imgur"
	gomock "go.uber.org/mock/gomock"
)

// MockImgurClient is a mock of ImgurClient interface.
type MockImgurClient struct {
	ctrl     *gomock.Controller
	recorder *MockImgurClientMockRecorder
	isgomock struct{}
}

// MockImgurClientMockRecorder is the mock recorder for MockImgurClient.
type MockImgurClientMockRecorder struct {
	mock *MockImgurClient
}

// NewMockImgurClient creates a new mock instance.
func NewMockImgurClient(ctrl *gomock.Controller) *MockImgurClient {
	mock := &MockImgurClient{ctrl: ctrl}
	mock.recorder = &MockImgurClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImgurClient) EXPECT() *MockImgurClientMockRecorder {
	return m.recorder
}

// GetInfoFromURL mocks base method.
func (m *MockImgurClient) GetInfoFromURL(urlString string) (*go_imgur.GenericInfo, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoFromURL", urlString)
	ret0, _ := ret[0].(*go_imgur.GenericInfo)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInfoFromURL indicates an expected call of GetInfoFromURL.
func (mr *MockImgurClientMockRecorder) GetInfoFromURL(urlString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoFromURL", reflect.TypeOf((*MockImgurClient)(nil).GetInfoFromURL), urlString)
}
